!function(){"use strict";var e={85:function(e,t,n){e.exports=n.p+"4c0dd281ed290172cc25.jpg"},388:function(e,t,n){e.exports=n.p+"ebfedd2c63f286190692.jpg"},93:function(e,t,n){e.exports=n.p+"6a454dbebac8a0c1271d.jpg"},255:function(e,t,n){e.exports=n.p+"82d18be89594d053c2a2.jpg"},736:function(e,t,n){e.exports=n.p+"c8c988e0d459c59423b7.jpg"},308:function(e,t,n){e.exports=n.p+"76df5cccb291806e252c.jpg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.m=e,n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e}(),n.b=document.baseURI||self.location.href,function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._handleCardClick=r}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return this._cardSelector.content.querySelector(".card__item").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._element.querySelector(".card__img").src=this._link,this._element.querySelector(".card__img").alt=this._name,this._element.querySelector(".card__label").textContent=this._name,this._setEventListeners(),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".card__button-like").addEventListener("click",(function(e){e.target.classList.toggle("card_like-active")})),this._element.querySelector(".card__button-remove").addEventListener("click",(function(){e._element.remove()})),this._element.querySelector(".card__img").addEventListener("click",(function(){e._handleCardClick(e._link,e._name)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=t.formSelector,this._input=t.inputSelector,this._inputInvalid=t.inputErrorClass,this._submit=t.submitButtonSelector,this._inactiveButton=t.inactiveButtonClass,this._errorVisible=t.errorVisible,this._formElement=n,this._formInput=this._formElement.querySelectorAll(this._input)}var t,n;return t=e,(n=[{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"toogleButtonState",value:function(){this._hasInvalidInput()?(this._buttonElement.classList.add(this._inactiveButton),this._buttonElement.setAttribute("disabled",!0)):(this._buttonElement.classList.remove(this._inactiveButton),this._buttonElement.removeAttribute("disabled"))}},{key:"getErrorElement",value:function(e){return e.closest(".popup__label").querySelector(".popup__error")}},{key:"_showInputError",value:function(e,t){var n=this.getErrorElement(e);n.classList.add(this._errorVisible),n.textContent=t,e.classList.add(this._inputInvalid)}},{key:"_hideInputError",value:function(e){var t=this.getErrorElement(e);t.classList.remove(this._errorVisible),t.textContent="",e.classList.remove(this._inputInvalid)}},{key:"ressetValidForm",value:function(){var e=this;this._formInput.forEach((function(t){e._hideInputError(t)})),this.toogleButtonState()}},{key:"enableValidation",value:function(){var e=this;this._inputList=Array.from(this._formElement.querySelectorAll(this._input)),this._buttonElement=this._formElement.querySelector(this._submit),this.toogleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e.toogleButtonState()}))}))}}])&&r(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=t}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__button-close"))&&e.close()}))}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(){return l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=s(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},l.apply(this,arguments)}function s(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=y(e)););return e}function p(e,t){return p=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},p(e,t)}function f(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function y(e){return y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},y(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&p(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=y(r);if(o){var n=y(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupImg=t._popup.querySelector(".popup__img"),t._cardCaption=t._popup.querySelector(".popup__figcaption"),t}return t=u,(n=[{key:"open",value:function(e,t){l(y(u.prototype),"open",this).call(this),this._popupImg.src=e,this._popupImg.alt=t,this._cardCaption.textContent=t}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(u);function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function b(){return b="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=m(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},b.apply(this,arguments)}function m(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function g(e,t){if(t&&("object"===_(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function w(e){return w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},w(e)}var E=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=w(r);if(o){var n=w(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return g(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=n._popup.querySelector(".popup__form"),n._inputList=Array.from(n._form.querySelectorAll(".popup__input")),n._submit=t,n}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputList.forEach((function(t){e[t.name]=t.value})),e}},{key:"close",value:function(){b(w(u.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;b(w(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submit(e._getInputValues()),e.close()}))}}])&&d(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(u);function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var S=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._containerElement=n}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._containerElement.append(e)}},{key:"prependItem",value:function(e){this._containerElement.prepend(e)}},{key:"addInitialItems",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t){var n=t.name,r=t.job;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._job=r}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,job:this._job.textContent}}},{key:"setUserInfo",value:function(e,t){this._name.textContent=e,this._job.textContent=t}}])&&k(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),L=[{name:"Лето, Солне, Песок!",link:new URL(n(85),n.b)},{name:"Эльбрус это, что то",link:new URL(n(388),n.b)},{name:"Закат Великолепен",link:new URL(n(93),n.b)},{name:"Супер Заправка",link:new URL(n(255),n.b)},{name:"Отцвели",link:new URL(n(736),n.b)},{name:"Почти Утонула",link:new URL(n(308),n.b)}],I={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_inactive",inputErrorClass:"popup__input_error",errorVisible:"popup__error_visible"},P=document.querySelector(".page"),C=P.querySelector(".profile__button-edit"),q=P.querySelector(".profile__button-add"),R=P.querySelector("#popupEditInfo"),x=P.querySelector("#popupAddCard"),B=P.querySelector("#popupImgZoom"),T=P.querySelector(".profile__title"),V=P.querySelector(".profile__job"),U=document.forms.editInfo.name,A=document.forms.editInfo.job,D=document.forms.editInfo,N=document.forms.addNewCard,$=P.querySelector(".gallery"),F=document.querySelector("#item-temlate"),M=function(e){return new t(e,F,(function(e,t){Q.open(e,t)})).generateCard()},Z=new S({items:L,renderer:function(e){Z.addItem(M(e))}},$);Z.addInitialItems();var z=new o(I,D),G=new o(I,N);z.enableValidation(),G.enableValidation();var H=new O({name:T,job:V}),J=new E(R,(function(e){H.setUserInfo(e.name,e.job)})),K=new E(x,(function(e){var t=M(e);Z.prependItem(t)})),Q=new h(B);J.setEventListeners(),K.setEventListeners(),Q.setEventListeners(),C.addEventListener("click",(function(){var e=H.getUserInfo();U.value=e.name,A.value=e.job,z.toogleButtonState(),J.open()})),q.addEventListener("click",(function(){G.toogleButtonState(),K.open()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixFQUFNd0IsR0FBa0IsU0FBQy9HLEVBQU1GLEdBQVdtSCxFQUFTQyxLQUFLbEgsRUFBTUYsTUFDekVxSCxnQkFJWEMsRUFBYyxJQUFJdkMsRUFBUSxDQUM5QkUsTUFBT2MsRUFBY2IsU0FBVSxTQUFDTyxHQUM5QjZCLEVBQVlDLFFBQVFMLEVBQVd6QixNQUVoQ3VCLEdBQ0hNLEVBQVlFLGtCQUdaLElBQU1DLEVBQW9CLElBQUl0RyxFQUFjQyxFQUFReUYsR0FDOUNhLEVBQW9CLElBQUl2RyxFQUFjQyxFQUFRMEYsR0FDcERXLEVBQWtCRSxtQkFDbEJELEVBQWtCQyxtQkFHbEIsSUFBTUMsRUFBYyxJQUFJbEMsRUFBUyxDQUFFMUYsS0FBTXVHLEVBQWFaLElBQUthLElBRXJEcUIsRUFBWSxJQUFJckQsRUFBYzRCLEdBQWUsU0FBQ3hHLEdBQ2xEZ0ksRUFBWUUsWUFBWWxJLEVBQUtJLEtBQU1KLEVBQUsrRixRQUlwQ29DLEVBQVcsSUFBSXZELEVBQWM2QixHQUFjLFNBQUN6RyxHQUNoRCxJQUFNbUgsRUFBYUcsRUFBV3RILEdBQzlCMEgsRUFBWVUsWUFBWWpCLE1BSWJJLEVBQVcsSUFBSS9DLEVBQWVrQyxHQUUzQ3VCLEVBQVVJLG9CQUNWRixFQUFTRSxvQkFDVGQsRUFBU2Msb0JBSVQvQixFQUFrQnJGLGlCQUFpQixTQUFTLFdBQzFDLElBQU1xSCxFQUFXTixFQUFZTyxjQUM3QjFCLEVBQWdCOUIsTUFBUXVELEVBQVNsSSxLQUNqQzRHLEVBQWVqQyxNQUFRdUQsRUFBU3ZDLElBQ2hDOEIsRUFBa0JqRSxvQkFDbEJxRSxFQUFVVCxVQUtaakIsRUFBaUJ0RixpQkFBaUIsU0FBUyxXQUN6QzZHLEVBQWtCbEUsb0JBQ2xCdUUsRUFBU1gsVSIsInNvdXJjZXMiOlsid2VicGFjazovL21lc3RvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL21lc3RvL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vbWVzdG8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9tZXN0by93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9tZXN0by93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0NhcmRzLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL3BvcHVwLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvU2VjdGlvbi5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3V0aWxzL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9wYWdlcy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfSIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZHMge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBjYXJkU2VsZWN0b3IsIGhhbmRsZUNhcmRDbGljaykge1xuICAgIHRoaXMuX25hbWUgPSBkYXRhLm5hbWU7XG4gICAgdGhpcy5fbGluayA9IGRhdGEubGluaztcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xuICB9XG4gIF9nZXRUZW1wbGF0ZSgpIHtcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IHRoaXMuX2NhcmRTZWxlY3RvclxuICAgICAgLmNvbnRlbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9faXRlbScpXG4gICAgICAuY2xvbmVOb2RlKHRydWUpO1xuXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50XG4gIH1cbiAgZ2VuZXJhdGVDYXJkKCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltZycpLnNyYyA9IHRoaXMuX2xpbmtcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19pbWcnKS5hbHQgPSB0aGlzLl9uYW1lXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZF9fbGFiZWwnKS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWVcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpXG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgfVxuXG4gIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYXJkX19idXR0b24tbGlrZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnRhcmdldC5jbGFzc0xpc3QudG9nZ2xlKCdjYXJkX2xpa2UtYWN0aXZlJylcbiAgICB9KVxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2J1dHRvbi1yZW1vdmUnKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgIHRoaXMuX2VsZW1lbnQucmVtb3ZlKClcbiAgICB9KVxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRfX2ltZycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2xpbmssIHRoaXMuX25hbWUpXG4gICAgfSlcblxuICB9XG59XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihjb25maWcsIGZvcm1FbGVtZW50KSB7XHJcbiAgICB0aGlzLl9mb3JtID0gY29uZmlnLmZvcm1TZWxlY3RvcjtcclxuICAgIHRoaXMuX2lucHV0ID0gY29uZmlnLmlucHV0U2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbnB1dEludmFsaWQgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fc3VibWl0ID0gY29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yO1xyXG4gICAgdGhpcy5faW5hY3RpdmVCdXR0b24gPSBjb25maWcuaW5hY3RpdmVCdXR0b25DbGFzcztcclxuICAgIHRoaXMuX2Vycm9yVmlzaWJsZSA9IGNvbmZpZy5lcnJvclZpc2libGU7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudCA9IGZvcm1FbGVtZW50O1xyXG4gICAgdGhpcy5fZm9ybUlucHV0ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dClcclxuICB9XHJcbiAgLy8g0L3QtSDQstCw0LvQuNC00L3Ri9C5INGN0LvQtdC80LXQvdGCXHJcbiAgX2hhc0ludmFsaWRJbnB1dCgpIHtcclxuICAgIHJldHVybiB0aGlzLl9pbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgIHJldHVybiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkXHJcbiAgICB9KVxyXG4gIH1cclxuICAvLyDQv9GA0L7QstC10YDQutCwINGE0L7RgNC80Ysg0L3QsCDQstCw0LvQuNC00L3QvtCy0YHRjFxyXG4gIF9pc1ZhbGlkKGZvcm1JbnB1dCkge1xyXG4gICAgaWYgKCFmb3JtSW5wdXQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoZm9ybUlucHV0LCBmb3JtSW5wdXQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoZm9ybUlucHV0KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vINC/0LXRgNC10LrQu9GO0YfQtdC90LjQtSDQutC90L7Qv9C60Lgg0YHQsNCx0LzQuNGCXHJcbiAgdG9vZ2xlQnV0dG9uU3RhdGUoKSB7XHJcbiAgICBpZiAodGhpcy5faGFzSW52YWxpZElucHV0KCkpIHtcclxuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2luYWN0aXZlQnV0dG9uKVxyXG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LnNldEF0dHJpYnV0ZSgnZGlzYWJsZWQnLCB0cnVlKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5fYnV0dG9uRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2luYWN0aXZlQnV0dG9uKVxyXG4gICAgICB0aGlzLl9idXR0b25FbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKVxyXG4gICAgfVxyXG4gIH1cclxuICAvLyDRjdC70LXQvNC10L3RgiDRgSDQvtGI0LjQsdC60L7QuVxyXG4gIGdldEVycm9yRWxlbWVudChmb3JtSW5wdXQpIHtcclxuICAgIHJldHVybiBmb3JtSW5wdXQuY2xvc2VzdCgnLnBvcHVwX19sYWJlbCcpLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZXJyb3InKTtcclxuICB9XHJcbiAgLy8g0L7RiNC40LHQutCwINCy0LjQtNC90LBcclxuICBfc2hvd0lucHV0RXJyb3IoZm9ybUlucHV0LCBlcnJvck1lc3NlZ2UpIHtcclxuICAgIGNvbnN0IGVycm9yRWxlbWVudCA9IHRoaXMuZ2V0RXJyb3JFbGVtZW50KGZvcm1JbnB1dClcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yVmlzaWJsZSk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBlcnJvck1lc3NlZ2VcclxuICAgIGZvcm1JbnB1dC5jbGFzc0xpc3QuYWRkKHRoaXMuX2lucHV0SW52YWxpZCk7XHJcbiAgfVxyXG4gIC8vINC+0YjQuNCx0LrQsCDRgdC60YDRi9GC0LBcclxuICBfaGlkZUlucHV0RXJyb3IoZm9ybUlucHV0KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLmdldEVycm9yRWxlbWVudChmb3JtSW5wdXQpXHJcbiAgICBlcnJvckVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9lcnJvclZpc2libGUpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gJyc7XHJcbiAgICBmb3JtSW5wdXQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEludmFsaWQpO1xyXG4gIH1cclxuICAvLyDRgdCx0YDQvtGBINC/0L7Qu9C10Lkg0L7RiNC40LHQutC4XHJcbiAgcmVzc2V0VmFsaWRGb3JtKCkge1xyXG4gICAgdGhpcy5fZm9ybUlucHV0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XHJcbiAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGZvcm1FbGVtZW50KVxyXG4gICAgfSlcclxuICAgIHRoaXMudG9vZ2xlQnV0dG9uU3RhdGUoKVxyXG4gIH1cclxuXHJcbiAgLy8g0L/QtdGA0LXQtNCw0ZHRgiDQtNCw0L3QvdGL0LUg0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0L3QsCDQstCw0LvQuNC00L3QvtGB0YLRjFxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXQpKTtcclxuICAgIHRoaXMuX2J1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX3N1Ym1pdCk7XHJcbiAgICB0aGlzLnRvb2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoZm9ybUlucHV0KSA9PiB7XHJcbiAgICAgIGZvcm1JbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLl9pc1ZhbGlkKGZvcm1JbnB1dCk7XHJcbiAgICAgICAgdGhpcy50b29nbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5fcG9wdXAgPSAgcG9wdXBTZWxlY3RvclxyXG4gIH1cclxuXHJcbiAgb3BlbigpIHtcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuY2xhc3NMaXN0LnJlbW92ZSgncG9wdXBfb3BlbmVkJyk7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5faGFuZGxlRXNjQ2xvc2UpO1xyXG4gIH1cclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKGV2dCkgPT4geyAgIC8vINC30LDQutGA0YvRgtGMINC/0L7Qv9Cw0L8g0L3QsNC20LDRgtC40LXQvCDQvdCwIFwiRXNjYXBlXCJcclxuICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBzZXRFdmVudExpc3RlbmVycygpIHsgICAvLyDRg9GB0YLQsNC90L7QstC40YLRjCDRgdC70YPRiNCw0YLQtdC70LhcclxuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldnQpID0+IHsgIC8vINC30LDQutGA0YvRgtGMINC/0L7Qv9Cw0L/QsCDQvdCw0LbQsNGC0LjQtdC8INC90LAg0LrRgNC10YHRgtC40Log0LjQu9C4INC+0LLQtdGA0LvQtdC5XHJcbiAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXAnKSB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfX2J1dHRvbi1jbG9zZScpKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuL3BvcHVwLmpzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XHJcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKVxyXG4gICAgdGhpcy5fcG9wdXBJbWcgPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltZycpO1xyXG4gICAgdGhpcy5fY2FyZENhcHRpb24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ZpZ2NhcHRpb24nKTtcclxuICB9XHJcblxyXG4gIG9wZW4oc3JjLCBjYXB0aW9uKSB7XHJcbiAgICBzdXBlci5vcGVuKCk7XHJcbiAgICB0aGlzLl9wb3B1cEltZy5zcmMgPSBzcmM7XHJcbiAgICB0aGlzLl9wb3B1cEltZy5hbHQgPSBjYXB0aW9uO1xyXG4gICAgdGhpcy5fY2FyZENhcHRpb24udGV4dENvbnRlbnQgPSBjYXB0aW9uO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vcG9wdXAuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgaGFuZGxlU3VibWl0Rm9ybSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3RvcilcclxuICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKVxyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gQXJyYXkuZnJvbSh0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKSk7XHJcbiAgICB0aGlzLl9zdWJtaXQgPSBoYW5kbGVTdWJtaXRGb3JtXHJcbiAgfVxyXG5cclxuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XHJcbiAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcclxuICAgICAgZGF0YVtpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgc3VwZXIuY2xvc2UoKVxyXG4gICAgdGhpcy5fZm9ybS5yZXNldCgpXHJcbiAgfVxyXG5cclxuICBzZXRFdmVudExpc3RlbmVycygpIHsgICAvLyDRg9GB0YLQsNC90L7QstC40YLRjCDRgdC70YPRiNCw0YLQtdC70LhcclxuICAgIHN1cGVyLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB0aGlzLl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIChldnQpID0+IHtcclxuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdCh0aGlzLl9nZXRJbnB1dFZhbHVlcygpKTtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yICh7aXRlbXMsIHJlbmRlcmVyfSwgY29udGFpbmVyU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XHJcbiAgICB0aGlzLl9yZW5kZXJlciA9IHJlbmRlcmVyO1xyXG4gICAgdGhpcy5fY29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lclNlbGVjdG9yO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbShlbGVtZW50KSB7XHJcbiAgICB0aGlzLl9jb250YWluZXJFbGVtZW50LmFwcGVuZChlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIHByZXBlbmRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lckVsZW1lbnQucHJlcGVuZChlbGVtZW50KTtcclxuICB9XHJcblxyXG4gIGFkZEluaXRpYWxJdGVtcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgdGhpcy5fcmVuZGVyZXIoaXRlbSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xyXG4gIGNvbnN0cnVjdG9yICh7bmFtZSwgam9ifSkge1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWU7XHJcbiAgICB0aGlzLl9qb2IgPSBqb2I7XHJcbiAgfVxyXG5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7bmFtZTogdGhpcy5fbmFtZS50ZXh0Q29udGVudCwgam9iOiB0aGlzLl9qb2IudGV4dENvbnRlbnR9O1xyXG4gIH1cclxuXHJcbiAgc2V0VXNlckluZm8obmV3TmFtZSwgbmV3Sm9iKSB7XHJcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmV3TmFtZTtcclxuICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IG5ld0pvYjtcclxuICB9XHJcbn1cclxuIiwiY29uc3QgY2FyZEltYWdlMSA9IG5ldyBVUkwoJy4uL2ltYWdlL2dhbGxlcnkvaXRlbTEuanBnJywgaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IGNhcmRJbWFnZTIgPSBuZXcgVVJMKCcuLi9pbWFnZS9nYWxsZXJ5L2l0ZW0yLmpwZycsIGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBjYXJkSW1hZ2UzID0gbmV3IFVSTCgnLi4vaW1hZ2UvZ2FsbGVyeS9pdGVtMy5qcGcnLCBpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgY2FyZEltYWdlNCA9IG5ldyBVUkwoJy4uL2ltYWdlL2dhbGxlcnkvaXRlbTQuanBnJywgaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IGNhcmRJbWFnZTUgPSBuZXcgVVJMKCcuLi9pbWFnZS9nYWxsZXJ5L2l0ZW01LmpwZycsIGltcG9ydC5tZXRhLnVybCk7XG5jb25zdCBjYXJkSW1hZ2U2ID0gbmV3IFVSTCgnLi4vaW1hZ2UvZ2FsbGVyeS9pdGVtNi5qcGcnLCBpbXBvcnQubWV0YS51cmwpO1xuXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xuICB7XG4gICAgbmFtZTogJ9Cb0LXRgtC+LCDQodC+0LvQvdC1LCDQn9C10YHQvtC6IScsXG4gICAgbGluazogY2FyZEltYWdlMVxuICB9LFxuICB7XG4gICAgbmFtZTogJ9Ct0LvRjNCx0YDRg9GBINGN0YLQviwg0YfRgtC+INGC0L4nLFxuICAgIGxpbms6IGNhcmRJbWFnZTJcbiAgfSxcbiAge1xuICAgIG5hbWU6ICfQl9Cw0LrQsNGCINCS0LXQu9C40LrQvtC70LXQv9C10L0nLFxuICAgIGxpbms6IGNhcmRJbWFnZTNcbiAgfSxcbiAge1xuICAgIG5hbWU6ICfQodGD0L/QtdGAINCX0LDQv9GA0LDQstC60LAnLFxuICAgIGxpbms6IGNhcmRJbWFnZTRcbiAgfSxcbiAge1xuICAgIG5hbWU6ICfQntGC0YbQstC10LvQuCcsXG4gICAgbGluazogY2FyZEltYWdlNVxuICB9LFxuICB7XG4gICAgbmFtZTogJ9Cf0L7Rh9GC0Lgg0KPRgtC+0L3Rg9C70LAnLFxuICAgIGxpbms6IGNhcmRJbWFnZTZcbiAgfVxuXTtcblxuLy8g0L7QsdGK0LXQutGCINC00LvRjyDQstCw0LvQuNC00LDRhtC40Lgg0YTQvtGA0LxcbmV4cG9ydCBjb25zdCBjb25maWcgPSB7XG4gIGZvcm1TZWxlY3RvcjogJy5wb3B1cF9fZm9ybScsXG4gIGlucHV0U2VsZWN0b3I6ICcucG9wdXBfX2lucHV0JyxcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcucG9wdXBfX3N1Ym1pdCcsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6ICdwb3B1cF9fc3VibWl0X2luYWN0aXZlJyxcbiAgaW5wdXRFcnJvckNsYXNzOiAncG9wdXBfX2lucHV0X2Vycm9yJyxcbiAgZXJyb3JWaXNpYmxlOiAncG9wdXBfX2Vycm9yX3Zpc2libGUnXG59XG5cblxuXG4vLyDQutC+0L3RgtC10LnQvdC10YAg0LIg0LrQvtGC0L7RgNC+0Lwg0LvQtdC20LjRgiDQstC10YHRjCDQutC+0L3RgtC10L3RglxuY29uc3QgcGFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlJyk7XG5cbi8vINC60L3QvtC/0LrQuDog0YDQtdC00LDQutGC0LjRgNC+0LLQsNGC0Ywg0L/RgNC+0YTQuNC70YwsINC00L7QsdCw0LLQuNGC0Ywg0LrQsNGA0YLQvtGH0LrRg1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVCdXR0b25FZGl0ID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYnV0dG9uLWVkaXQnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlQnV0dG9uQWRkID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYnV0dG9uLWFkZCcpO1xuXG4vLyDQv9C+0L/QsNC/0YtcbmV4cG9ydCBjb25zdCBwb3B1cEVkaXRJbmZvID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcjcG9wdXBFZGl0SW5mbycpO1xuZXhwb3J0IGNvbnN0IHBvcHVwQWRkQ2FyZCA9IHBhZ2UucXVlcnlTZWxlY3RvcignI3BvcHVwQWRkQ2FyZCcpO1xuZXhwb3J0IGNvbnN0IHBvcHVwT3Blblpvb20gPSBwYWdlLnF1ZXJ5U2VsZWN0b3IoJyNwb3B1cEltZ1pvb20nKTtcblxuLy8g0Y3Qu9C10LzQtdC90YLRiyDQv9GA0L7RhNC40LvRj1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVOYW1lID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fdGl0bGUnKTtcbmV4cG9ydCBjb25zdCBwcm9maWxlSm9iID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fam9iJyk7XG5cbi8vINGN0LvQtdC80LXQvdGC0YsgZm9ybSBlZGl0XG5leHBvcnQgY29uc3QgcHJvZmlsZUVkaXROYW1lID0gZG9jdW1lbnQuZm9ybXMuZWRpdEluZm8ubmFtZVxuZXhwb3J0IGNvbnN0IHB0b2ZpbGVFZGl0Sm9iID0gZG9jdW1lbnQuZm9ybXMuZWRpdEluZm8uam9iXG5cbi8vIGZvcm1zXG5leHBvcnQgY29uc3QgZm9ybUVsZW1lbnRFZGl0ID0gZG9jdW1lbnQuZm9ybXMuZWRpdEluZm9cbmV4cG9ydCBjb25zdCBmb3JtRWxlbWVudEFkZCA9IGRvY3VtZW50LmZvcm1zLmFkZE5ld0NhcmRcblxuLy8g0Y3Qu9C10LzQtdC90YLRiyDQs9Cw0LvQu9C10YDQtdC4INC4INGC0LXQvNC/0LvQtdC50YIg0LrQvtC90YLQtdC50L3QtdGA0LBcbmV4cG9ydCBjb25zdCBnYWxsZXJ5Q29udGFpbmVyID0gcGFnZS5xdWVyeVNlbGVjdG9yKCcuZ2FsbGVyeScpO1xuZXhwb3J0IGNvbnN0IHRlbWxhdGVDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaXRlbS10ZW1sYXRlJylcblxuIiwiaW1wb3J0ICcuL2luZGV4LmNzcyc7IC8vINGB0YLQuNC70Lgg0LTQu9GPIHdlYnBhY2tcblxuaW1wb3J0IENhcmRzIGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZHMuanMnO1xuaW1wb3J0IEZvcm1WYWxpZGF0b3IgZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gJy4uL2NvbXBvbmVudHMvVXNlckluZm8uanMnO1xuaW1wb3J0IHtcbiAgY29uZmlnLFxuICBwcm9maWxlRWRpdE5hbWUsXG4gIHB0b2ZpbGVFZGl0Sm9iLFxuICBwcm9maWxlTmFtZSxcbiAgcHJvZmlsZUpvYixcbiAgaW5pdGlhbENhcmRzLFxuICBwcm9maWxlQnV0dG9uRWRpdCxcbiAgcHJvZmlsZUJ1dHRvbkFkZCxcbiAgZm9ybUVsZW1lbnRFZGl0LFxuICBmb3JtRWxlbWVudEFkZCxcbiAgZ2FsbGVyeUNvbnRhaW5lcixcbiAgdGVtbGF0ZUNvbnRhaW5lcixcbiAgcG9wdXBPcGVuWm9vbSxcbiAgcG9wdXBBZGRDYXJkLFxuICBwb3B1cEVkaXRJbmZvXG59IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cy5qcydcblxuXG5jb25zdCBjcmVhdGVDYXJkID0gKGl0ZW0pID0+IHtcbiAgY29uc3QgbmV3Q2FyZCA9IG5ldyBDYXJkcyhpdGVtLCB0ZW1sYXRlQ29udGFpbmVyLCAobGluaywgbmFtZSkgPT4geyBwb3B1cEltZy5vcGVuKGxpbmssIG5hbWUpOyB9KTtcbiAgcmV0dXJuIG5ld0NhcmQuZ2VuZXJhdGVDYXJkKCk7XG59XG5cbi8vINGB0LXQutGG0LjRjyDQtNC70Y8g0LrQsNGA0YLQvtGH0LXQulxuY29uc3QgY2FyZFNlY3Rpb24gPSBuZXcgU2VjdGlvbih7XG4gIGl0ZW1zOiBpbml0aWFsQ2FyZHMsIHJlbmRlcmVyOiAoaXRlbSkgPT4ge1xuICAgIGNhcmRTZWN0aW9uLmFkZEl0ZW0oY3JlYXRlQ2FyZChpdGVtKSk7XG4gIH1cbn0sIGdhbGxlcnlDb250YWluZXIpO1xuY2FyZFNlY3Rpb24uYWRkSW5pdGlhbEl0ZW1zKCk7ICAvLyDQtNC+0LHQsNCy0LjRgtGMINC90LDRh9Cw0LvRjNC90YvQtSDQutCw0YDRgtC+0YfQutC4XG5cbi8vINC30LDQv9GD0YHQuiDQstCw0LvQuNC00LDRhtC40Y8g0YTQvtGA0LxcbmNvbnN0IHByb2ZpbGVWYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnLCBmb3JtRWxlbWVudEVkaXQpO1xuY29uc3QgYWRkQ2FyZFZhbGlkYXRpb24gPSBuZXcgRm9ybVZhbGlkYXRvcihjb25maWcsIGZvcm1FbGVtZW50QWRkKTtcbnByb2ZpbGVWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcbmFkZENhcmRWYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuLy8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQuNC90YTQvtGA0LzQsNGG0LjQuCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbmNvbnN0IHByb2ZpbGVJbmZvID0gbmV3IFVzZXJJbmZvKHsgbmFtZTogcHJvZmlsZU5hbWUsIGpvYjogcHJvZmlsZUpvYiB9KTtcblxuY29uc3QgcG9wdXBFZGl0ID0gbmV3IFBvcHVwV2l0aEZvcm0ocG9wdXBFZGl0SW5mbywgKGRhdGEpID0+IHtcbiAgcHJvZmlsZUluZm8uc2V0VXNlckluZm8oZGF0YS5uYW1lLCBkYXRhLmpvYik7XG59KTtcblxuLy8g0YHQvtC30LTQsNC90LjQtSDQvdC+0LLQvtC5INC60LDRgNGC0L7Rh9C60LjQuSDQv9C+0LvRjNC30L7QstCw0YLQtdC70LXQvFxuY29uc3QgcG9wdXBBZGQgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cEFkZENhcmQsIChkYXRhKSA9PiB7XG4gIGNvbnN0IGFkZE5ld0NhcmQgPSBjcmVhdGVDYXJkKGRhdGEpO1xuICBjYXJkU2VjdGlvbi5wcmVwZW5kSXRlbShhZGROZXdDYXJkKTtcbn0pO1xuXG4vLyDRgdC+0LfQtNCw0L3QuNC1INC/0L7Qv9Cw0L8gYyDQutCw0YDRgtC40L3QutC+0LlcbmV4cG9ydCBjb25zdCBwb3B1cEltZyA9IG5ldyBQb3B1cFdpdGhJbWFnZShwb3B1cE9wZW5ab29tKTtcbi8vINGD0YHRgtCw0L3QvtCy0LjRgtGMINGB0LvRg9GI0LDRgtC10LvQuCDQtNC70Y8g0L/QvtC/0LDQv1xucG9wdXBFZGl0LnNldEV2ZW50TGlzdGVuZXJzKCk7XG5wb3B1cEFkZC5zZXRFdmVudExpc3RlbmVycygpO1xucG9wdXBJbWcuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8g0L7RgtGB0LvQtdC20LjQstCw0L3QuNC1INC60L3QvtC/0LrQuCBcItGA0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMINC/0YDQvtGE0LjQu9GMXCJcblxucHJvZmlsZUJ1dHRvbkVkaXQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gIGNvbnN0IHVzZXJJbmZvID0gcHJvZmlsZUluZm8uZ2V0VXNlckluZm8oKTtcbiAgcHJvZmlsZUVkaXROYW1lLnZhbHVlID0gdXNlckluZm8ubmFtZTtcbiAgcHRvZmlsZUVkaXRKb2IudmFsdWUgPSB1c2VySW5mby5qb2I7XG4gIHByb2ZpbGVWYWxpZGF0aW9uLnRvb2dsZUJ1dHRvblN0YXRlKCk7XG4gIHBvcHVwRWRpdC5vcGVuKCk7XG59KTtcblxuLy8g0L7RgtGB0LvQtdC20LjQstCw0L3QuNC1INC60L3QvtC/0LrQuCBcItC00L7QsdCw0LLQuNGC0Ywg0LrQsNGA0YLQvtGH0LrRg1wiXG5cbnByb2ZpbGVCdXR0b25BZGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7ICAgIC8vINC+0YLRgdC70LXQttC40LLQsNC90LjQtSDQutC90L7Qv9C60LggXCLQtNC+0LHQsNCy0LjRgtGMINC60LDRgNGC0L7Rh9C60YNcIlxuICBhZGRDYXJkVmFsaWRhdGlvbi50b29nbGVCdXR0b25TdGF0ZSgpO1xuICBwb3B1cEFkZC5vcGVuKCk7XG59KTtcblxuIl0sIm5hbWVzIjpbIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwibSIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwiZSIsIndpbmRvdyIsIm8iLCJvYmoiLCJwcm9wIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiZG9jdW1lbnQiLCJjdXJyZW50U2NyaXB0Iiwic3JjIiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwibGVuZ3RoIiwiRXJyb3IiLCJyZXBsYWNlIiwicCIsImIiLCJiYXNlVVJJIiwic2VsZiIsImhyZWYiLCJDYXJkcyIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfY2FyZFNlbGVjdG9yIiwiX2hhbmRsZUNhcmRDbGljayIsImNvbnRlbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIl9zZXRFdmVudExpc3RlbmVycyIsImFkZEV2ZW50TGlzdGVuZXIiLCJldnQiLCJ0YXJnZXQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfZm9ybSIsImZvcm1TZWxlY3RvciIsIl9pbnB1dCIsImlucHV0U2VsZWN0b3IiLCJfaW5wdXRJbnZhbGlkIiwiaW5wdXRFcnJvckNsYXNzIiwiX3N1Ym1pdCIsInN1Ym1pdEJ1dHRvblNlbGVjdG9yIiwiX2luYWN0aXZlQnV0dG9uIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9lcnJvclZpc2libGUiLCJlcnJvclZpc2libGUiLCJfZm9ybUVsZW1lbnQiLCJfZm9ybUlucHV0IiwicXVlcnlTZWxlY3RvckFsbCIsIl9pbnB1dExpc3QiLCJzb21lIiwiaW5wdXRFbGVtZW50IiwidmFsaWRpdHkiLCJ2YWxpZCIsImZvcm1JbnB1dCIsIl9oaWRlSW5wdXRFcnJvciIsIl9zaG93SW5wdXRFcnJvciIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsIl9idXR0b25FbGVtZW50IiwiYWRkIiwic2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvc2VzdCIsImVycm9yTWVzc2VnZSIsImVycm9yRWxlbWVudCIsImdldEVycm9yRWxlbWVudCIsImZvckVhY2giLCJ0b29nbGVCdXR0b25TdGF0ZSIsIkFycmF5IiwiZnJvbSIsIl9pc1ZhbGlkIiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwia2V5IiwiY2xvc2UiLCJfcG9wdXAiLCJfaGFuZGxlRXNjQ2xvc2UiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY29udGFpbnMiLCJQb3B1cFdpdGhJbWFnZSIsIl9wb3B1cEltZyIsIl9jYXJkQ2FwdGlvbiIsImNhcHRpb24iLCJQb3B1cFdpdGhGb3JtIiwiaGFuZGxlU3VibWl0Rm9ybSIsImlucHV0IiwidmFsdWUiLCJyZXNldCIsInByZXZlbnREZWZhdWx0IiwiX2dldElucHV0VmFsdWVzIiwiU2VjdGlvbiIsImNvbnRhaW5lclNlbGVjdG9yIiwiaXRlbXMiLCJyZW5kZXJlciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXJFbGVtZW50IiwiZWxlbWVudCIsImFwcGVuZCIsInByZXBlbmQiLCJpdGVtIiwiVXNlckluZm8iLCJqb2IiLCJfam9iIiwibmV3TmFtZSIsIm5ld0pvYiIsImluaXRpYWxDYXJkcyIsIlVSTCIsInBhZ2UiLCJwcm9maWxlQnV0dG9uRWRpdCIsInByb2ZpbGVCdXR0b25BZGQiLCJwb3B1cEVkaXRJbmZvIiwicG9wdXBBZGRDYXJkIiwicG9wdXBPcGVuWm9vbSIsInByb2ZpbGVOYW1lIiwicHJvZmlsZUpvYiIsInByb2ZpbGVFZGl0TmFtZSIsImZvcm1zIiwiZWRpdEluZm8iLCJwdG9maWxlRWRpdEpvYiIsImZvcm1FbGVtZW50RWRpdCIsImZvcm1FbGVtZW50QWRkIiwiYWRkTmV3Q2FyZCIsImdhbGxlcnlDb250YWluZXIiLCJ0ZW1sYXRlQ29udGFpbmVyIiwiY3JlYXRlQ2FyZCIsInBvcHVwSW1nIiwib3BlbiIsImdlbmVyYXRlQ2FyZCIsImNhcmRTZWN0aW9uIiwiYWRkSXRlbSIsImFkZEluaXRpYWxJdGVtcyIsInByb2ZpbGVWYWxpZGF0aW9uIiwiYWRkQ2FyZFZhbGlkYXRpb24iLCJlbmFibGVWYWxpZGF0aW9uIiwicHJvZmlsZUluZm8iLCJwb3B1cEVkaXQiLCJzZXRVc2VySW5mbyIsInBvcHVwQWRkIiwicHJlcGVuZEl0ZW0iLCJzZXRFdmVudExpc3RlbmVycyIsInVzZXJJbmZvIiwiZ2V0VXNlckluZm8iXSwic291cmNlUm9vdCI6IiJ9